DEC64: Decimal Floating Point

This library contains initial attempts to port the brilliant work of *Douglas Crockford* [ML64](https://msdn.microsoft.com/en-us/library/hb5z4sxd.aspx) (Windows/Intel MASM assembler).

```
; This file can be processed with Microsoft's ML64.exe. There might be other
; assemblers that can process this file, but that has not been tested.
```

## Cross platform compilation/debugging!?

We would like to convert it to NASM (Unix Assembly) and in the end to an executable (.exe) and JavaScript. Unfortunately I'm not on a Windows PC but on a Mac.

A solution could be to try running `ML64.exe` compiler on Mac via [Wine](https://www.winehq.org/) or similar compatibility layer.

You could also try [MASM_OSX](https://github.com/janka102/MASM_OSX) to use Xcode or Visual Studio Code (VSC) to edit, compile, and debug MASM files. 

I was able to build the following example from Xcode

```
TITLE MASM Template       (main.asm)

; Description:
; 
; Revision date:

INCLUDE Irvine32.inc

.data
myMessage BYTE "MASM program example",0dh,0ah,0

.code
main PROC
    call Clrscr

    mov  edx,OFFSET myMessage
    call WriteString

    exit
main ENDP

END main
```

Which I could then execute from terminal and it printed `MASM program example`

```
$ ./bin/template
MASM program example
```

Looks promising!

Perhaps we could also run `ml64.exe` directly via `Wine`? Check [Microsoft Macro Assembler 8.0 (MASM) Package (x86)](https://www.microsoft.com/en-us/download/confirmation.aspx?id=12654)

I tried opening `Wine Dev` and running `wine MASMsetup.EXE` saying no to installing `Gecko` (UI). It failed with `Visual Studio EE 2005 required`. Others suggest extracting it from [Windows Driver Kit (WDK)](https://www.microsoft.com/en-us/download/details.aspx?id=11800) a 620Mb install!

Yet another option could be [mingw-w64](https://sourceforge.net/projects/mingw-w64/) - *Supports 32-bit and 64-bit Windows i386/x64* or [For darwin](http://mingw-w64.org/doku.php/download/darwin)

No luck trying to figure out how to use mingw-w64 for Windows via Wine!

There IS also a cross-platform [SASM](https://github.com/Dman95/SASM) Assembler IDE which includes [Mac OSX build instructions](http://www.brianrhall.net/rss/installingsasmonamac) and some [premade Mac builds](https://github.com/Dman95/SASM/issues/57)
I have not yet been able to make it pick up Qt however.

This conversion will allow broader usage in modern languages, such as those compiling to JavaScript, NASM, SIMD, asm.js or WASM (Web Assembly).

### Manual conversion

You could try the manual conversion using this guide: [Assembly from masm to nasm](http://left404.com/2011/01/04/converting-x86-assembly-from-masm-to-nasm-3/)

Ideally we should be able to decompile using this [recipe](http://reverseengineering.stackexchange.com/questions/10924/translate-assembly-to-c)
- [compile assembly to executable](http://www.tutorialspoint.com/compile_assembly_online.php)
- [executable to C decompiler](https://retdec.com/decompilation/)

If we ever get to a working `dec64.c` file either manually or via decompilation we could use [require-emscripten](https://www.npmjs.com/package/require-emscripten)
to convert the `.c` file to a Node JavaScript `.js` file via [Emscripten](https://github.com/kripken/emscripten)

## Credits

Douglas Crockford
douglas@crockford.com

dec64.com
2017-01-22
Public Domain

    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.
    SUBJECT TO CHANGE WITHOUT NOTICE.

DEC64 is a decimal floating point format for the next generation of
application programming languages.

dec64.asm is an implementation of the elementary operators for x64, including
    coefficient exponent equal is_any_nan is_integer is_zero less
    abs add ceiling dec divide floor half inc int integer_divide modulo
    multiply neg new normal not round signum subtract

dec64.asm.html is a description of the functions in dec64.asm.

dec64.h is a companion header file for C.

dec64_test.c is a test program.

dec64_string.c is an implementation of functions for converting between DEC64
and strings.

dec64_string.html is a description of the functions in dec64_string.c.

dec64_string.h is a companion header file.

dec64_string_test.c is a test program.

dec64_math.c is a placeholder implementation of elementary functions, including
    acos    asin    atan    atan2    cos    exp      factorial
    log     raise   root    sin      sqrt   tan
and
    random  seed

dec64_math.html is a description of the functions in dec64_math.h.

dec64_math.h is a companion header file.

dec64_math_test.c is a test program.

dec64.html is a descriptive web page.

dec64.png is a logo.
